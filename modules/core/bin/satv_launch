#!/usr/bin/perl

use Getopt::Long;
use strict;

my $dir_genomes="";
my $n_cpu=1;
my $alg="usearch";
my $method="lazy";
my $ann="prodigal";
my $start_run;
my $end_run;
my $run_time;
my $date;
my $cmd;
my $identity_orthologs=50;
my $identity_paralogs=90;
my $knife="";


#here are the available algorithms for the search
my %avail_algs=(
    "usearch" => 1,
    "blast" => 1,
    "last" => 1
);

my %avail_methods=(
    "laziest" => 1,
    "laziest-bh" => 1,
    "lazy" => 1,
    "lazy-bh" => 1,
    "strictest" => 1,
    "centroids" =>1

);

my %avail_ann=(
    "prokka" => 1,
    "prodigal" => 1

);



GetOptions ("d=s" => \$dir_genomes,"c=s"   => \$n_cpu, "ann=s"   => \$ann,"m=s"   => \$method,"a=s"   => \$alg,"k=s"   => \$knife, "i=s"   => \$identity_orthologs,"ip=s"   => \$identity_paralogs) or die("::usage: $0 -d <dir_genomes> -c <n_cpu> -ann <annotation_software> -m <comparison_method> -a <algorithm> -k <expression> -i <perc_identity> -ip <perc_identity_paralogs>\n[ERROR] launch failed! Please check the parameters!\n");

if($dir_genomes eq ""){
    print "::usage: $0 -d <dir_genomes> -c <n_cpu> -ann <annotation_software> -m <comparison_method> -a <algorithm> -k <expression> -i <perc_identity> -ip <perc_identity_paralogs>\n[ERROR] launch failed! Please check the parameters!\n";
    exit();
}


if(!(exists($avail_algs{$alg}))){
    print "::[ERROR] I do not know the search algorithm you specified\n";
    exit();
}

elsif(!(exists($avail_ann{$ann}))){
    print "::[ERROR] I do not know the annotation software you specified\n";
    exit();
}

elsif(!(exists($avail_methods{$method}))){
    print "::[ERROR] I do not know the method you specified\n";
    exit();
}


$date=`date "+%Y-%m-%d %H:%M:%S"`;
# To know the start time of the script
BEGIN { our $start_run = time(); }

print "::3..2..1..and...lift off -- $date";

#prokka annotation -- first stage
    print "::First stage\n";


    if($ann eq "prodigal"){

   	 $cmd="satv_prodigal-driver -d ${dir_genomes} -c $n_cpu";
   	 system($cmd);
    }
    elsif($ann eq "prokka"){

        if($knife ne ""){
    	 $cmd="satv_prokka-driver -d ${dir_genomes} -c $n_cpu -k $knife";
     	 system($cmd);

        }
        else{
    	 $cmd="satv_prokka-driver -d ${dir_genomes} -c $n_cpu";
     	 system($cmd);


        }

    }





   print "::Interstage -- generating the genomes_to_analyze.txt file\n";
    #I copy all the .faa files and generate the file genomes_to_analyze.txt

    system("satv_generate_list_genomes");


    print "::Second stage \n";

    $cmd="";

    #determining the pangenome --second stage
    if($method eq "laziest"){

        $cmd="satv_search-pangenome-laziest -g genomes_to_analyze.txt -c $n_cpu -i $identity_orthologs -a $alg";

    }
  elsif($method eq "laziest-bh"){

        $cmd="satv_search-pangenome-laziest-best-hit -g genomes_to_analyze.txt -c $n_cpu -i $identity_orthologs -a $alg";

    }

  elsif($method eq "lazy"){

        $cmd="satv_search-pangenome-lazy -g genomes_to_analyze.txt -c $n_cpu -i $identity_orthologs -a $alg";

    }
  elsif($method eq "lazy-bh"){

        $cmd="satv_search-pangenome-lazy-best-hit -g genomes_to_analyze.txt -c $n_cpu -i $identity_orthologs -a $alg";

    }

    elsif($method eq "strictest"){

        $cmd="satv_search-pangenome-strictest -g genomes_to_analyze.txt -c $n_cpu -i $identity_orthologs -ip $identity_paralogs -a $alg";

    }

    elsif($method eq "centroids"){

        $cmd="satv_search-pangenome-centroids -g genomes_to_analyze.txt -c $n_cpu -i $identity_orthologs";
        system($cmd);
    }


system($cmd);

$date=`date "+%Y-%m-%d %H:%M:%S"`;
# To know how many time was done since the script started
$end_run = time();
$run_time = $end_run - our $start_run;
print "::Mission accomplished by SaturnV in $run_time seconds -- $date\n";
